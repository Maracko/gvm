#!/bin/bash

###############################################################################
# GENERATED VERSION! DO NOT CHANGE!                                           #
SCRIPTVERSION="local-dev"
###############################################################################

# Static variable definintions
wd=$(pwd)
gvmroot="$HOME/.gvm"
gvmbin="$gvmroot/go/bin"
gvmexe="$gvmbin/go"
srcd="$gvmroot/next"
version="$1"
versionroot="$gvmroot/$version"
defaultgoroot="/usr/local/"
golanggit="https://go.googlesource.com/go"
dlroot="https://dl.google.com/go/"
update=$2
branch="master"

# Persistent Configuration Values
override=true
alwaysUpdate=false



# Determine active symlink version
active=$(readlink -f "$gvmroot"/go)
active=${active%*/go}
active=${active##*/}

bold=$(tput bold)
normal=$(tput sgr0)

# Print the help text for gvm
help() {
    printf "
    Go Version Manager [${bold}%s${normal}] \n
    Usage:\n
        ${bold}gvm <command> [arguments]${normal}

    The commands are:
        ${bold}<go version>${normal}  Install or Change Specific Go Version
        ${bold}ls${normal}            List Installed Go Versions
    
    ${bold}Examples:${normal}
      To install or activate a released version
      ${bold}gvm  1.17.5${normal}

    ${bold}DEVELOPMENT VERSION:${normal}
      To install or activate the development version
      ${bold}gvm next${normal}

      To update and activate an existing development version
      ${bold}gvm next --update${normal}\n" "$SCRIPTVERSION"
}

installed() {
    echo "${bold}Installed Go Versions"
    echo "---------------------${normal}"

    for dir in "$gvmroot"/*
    do
        dir=${dir%*/}
        trimmed=${dir##*/}

        if [[ $trimmed != "go" ]]
        then
            printf "%s" "$trimmed"

            if [[ "$active" == "$trimmed" ]]
            then
                printf "%s*%s" "${bold}" "${normal}"
            fi

            printf "\n"
        fi
    done
}

loadConfig() {
    cfg="$gvmroot/.config"

    if [[ -f "$cfg" ]]
    then
        # shellcheck disable=SC1090
        source "$cfg"
    fi
}

alwaysUpdateQ() {
    printf "Would you like to always update? "

    read -rp "[Yes: Y or y | No: Enter]? " yn
    if [[ "$yn" == "Y" || "$yn" == "y" ]]
    then
        echo "alwaysUpdate=true" >> "$gvmroot/.config"
    fi
}

update() {
    curl -sL "$GVMURL" > .gvm.tmp
                    
    # shellcheck disable=SC2002
    DOWNLOADEDSUM=$(cat .gvm.tmp | shasum -a 256)
    
    if [[ $DOWNLOADEDSUM != "$EXPECTEDSUM" ]]
    then
        printf "Checksum does not match new version of GVM [%s]\n" "$SCRIPTVERSION"
        printf "Expected: %s\n" "$EXPECTEDSUM"
        printf "Actual:   %s\n" "$DOWNLOADEDSUM"
        exit 1
    fi

    if ! cat .gvm.tmp > "$0"
    then
        rm .gvm.tmp
        printf "Failed to move new version of GVM [%s]\n" "$SCRIPTVERSION"
        exit 1
    fi
    rm .gvm.tmp

    printf "GVM [%s] has been updated\n" "$SCRIPTVERSION"
    printf "%s\n" "$@"
    if ! exec $0 "$@"
    then 
        printf "Failed to execute new version of GVM [%s]\n" "$SCRIPTVERSION"
        exit 1
    fi

    printf "Successful update and execution"
    exit 0
}

# fail accepts a string argument, prints it and exits with a non-zero exit code
function fail() {
    printf "%s\n" "$1"
    exit 1
}

# Update checks the published version of this script based on the SCRIPTVERSION
# variable. If the version is different, it will give the user the option to
# update the script. If the user chooses to update, it will download the new
# version and replace the old one. It will then re-run the script using the new
# version.
update() {

    if [[ $SCRIPTVERSION != "local-dev" ]]
    then
        GVMURL=$(printf "https://github.com/devnw/gvm/releases/download/%s/gvm" "$SCRIPTVERSION")
        SUMPATH=$(printf "%s.sum" "$GVMURL")
        EXPECTEDSUM=$(curl -sL "$SUMPATH")
    
        # shellcheck disable=SC2086
        FILESUM=$(cat $0 | shasum -a 256)

        if [[ "$EXPECTEDSUM" != "Not Found" ]]
        then
            if [[ "$EXPECTEDSUM" != "" && $FILESUM != "$EXPECTEDSUM" ]]
            then
                if [[ $alwaysUpdate == true ]]
                then
                    update
                else
                    printf "New Version of GVM [%s] Available would you like to update? " "$SCRIPTVERSION"

                    read -rp "[Yes: Y or y | No: Enter]? " yn

                    # Only trigger on `Y` or `y`
                    if [[ "$yn" == "Y" || "$yn" == "y" ]]
                    then
                        alwaysUpdateQ
                        update
                    fi
                fi
            fi
        fi
    fi
}

# Determine if the script is out of date and offer to update
update "$@"

if [[ "$1" == "" || "$1" ==  "help"  || "$1" == "-h" || "$1" == "--help" ]]
then
    help

    if [[ "$1" == ""  ]]
    then
        exit 1
    fi

    exit 0
fi

loadConfig

if [[ "$1" == "ls" ]]
then
    installed

    exit 0
fi

if [[ ! $1 =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.|[1-9][0-9]*)(((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?$ ]]
then
    if [[ "$1" != "next" ]]
    then
        printf "%s is not a valid Go version\n" "$1"

        help

        exit 1
    fi
fi

if [[ "$active" == "$1" ]]
then
    printf "Go version ${bold}%s${normal} is already active\n" "$1"
    exit 0
fi

arch="amd64"
if uname -a | grep "arm64"&> /dev/null
then
    arch="arm64"
    printf "Configuring for %s Architecture\n" "$arch"
fi
    
if [[ "$OSTYPE" == "darwin"* ]]
then
    os="darwin"
elif [[ "$OSTYPE" == "linux"* ]]
then
    os="linux"
elif [[ "$OSTYPE" == "freebsd"* ]]
then
    os="freebsd"
else
    printf "Unsupported OS\n"
    exit 1
fi

if [[ ! -d "$gvmroot" ]]
then
        printf "Adding ~/.gvm directory for go installs\n"
        if ! mkdir "$gvmroot" 
        then
            fail "$(printf "Error creating %s\n" "$gvmroot")"
        fi
fi

if [[ "$version" == "next" ]]
then
    printf "Installing Go %s\n" "$version"
    if ! which go
    then
        fail "$(printf "Installing go from %s requires an existing go installation\n" "$golanggit")"
    fi

    if [[ ! -d "$srcd" ]]
    then
        mkdir "$srcd"
    fi

    srcd="$srcd/go"

    if [[ ! -d "$srcd" ]]
    then
        printf "Cloning go source\n"
        if ! git clone "$golanggit" "$srcd"
        then
            fail "$("Error cloning %s\n" "$golanggit")"
        fi

        # Add update flag since source repo
        # did not already exist
        update="--update"
    fi
    
    if [[ "$update" == "--update" ]]
    then
        cd "$srcd" || exit 1

        if ! git checkout "$branch"
        then
            fail "$(printf "Checkout of %s failed\n" "$branch")"
        fi

        if ! git pull
        then
            fail "$(printf "git pull failed for %s\n" "$branch")"
        fi

        if ! cd "$srcd/src/"
        then
            fail "$(printf "Unable to move to %s\n" "$srcd/src/")"
        fi

        if ! ./all.bash
        then

            # Only fail if the go binary wasn't properly built
            if ! ../bin/go version
            then
                cd "$wd" || exit 1
                fail "$(printf "Failure installing go from %s\n" "$branch")"
            fi
        fi

        cd "$wd" || exit 1
    fi
else
    if [[ ! -d "$versionroot" ]]
    then
        pkg="go$version.$os-$arch.tar.gz"
        url="$dlroot$pkg"
        pkgDir="$gvmroot/$pkg"
        
        if ! curl -fsL --head "$url"&> /dev/null
        then
            fail "$(printf "Go Version Download %s does not exist" "$version")"
        fi

        printf "Downloading %s\n" "$url"
        if ! curl -f "$url" > "$pkgDir"
        then
            fail "$(printf "Unable to curl %s\n" "$url")"
        fi

        printf "Creating %s\n" "$versionroot"
        if ! mkdir -p "$versionroot"
        then
            fail "$(printf "Unable to create %s\n" "$versionroot")"
        fi

        if ! tar -C "$versionroot" -xzf "$pkgDir"
        then
            fail "$(printf "Unable to extract %s\n" "$pkgDir" rm -rf "$versionroot")"
        fi
            
        rm "$pkgDir"
    fi
fi

# Set correct path for symlink re-map
lnsrc="$versionroot/go"

printf "Updating symlink %s => %s\n" "$lnsrc" "$gvmroot"
if ! ln -sf "$lnsrc" "$gvmroot"
then
    fail "$(printf "Unable to symlink directory %s\n" "$lnsrc")"
fi

if [[ $override == true ]]
then
    # Check to see if the default root exists and if it is a symlink
    # prior to prompting the user to override it
    if [[ ! -L $defaultgoroot/go || ! -e $defaultgoroot/go ]]
    then
        read -rp "Do you wish to override /usr/local/go \
        [Yes: Y or y | No: Enter]? " yn

        # Only trigger on `Y` or `y`
        if [[ "$yn" == "Y" || "$yn" == "y" ]]
        then
            if ! sudo ln -sf "$gvmroot/go" "$defaultgoroot"
            then
                fail "$(printf "Unable to symlink new %s\n" "$defaultgoroot")"
            fi
        fi
    fi

    echo "override=false" >> "$gvmroot/.config"
fi

if ! printf "%s" "$PATH" | grep -q "$gvmbin"
then
    printf "Adding %s to PATH\n" "$gvmbin"
    
    path=$(printf "export PATH=\"%s:\$PATH\"" "$gvmbin")

    if [[ "$SHELL" == *"zsh" ]]
    then
        printf "%s" "$path" >> "$HOME/.zshrc"
        exec zsh
    else
        printf "%s" "$path" >> "$HOME/.bashrc"

        # shellcheck disable=SC1091
        source "$HOME"/.bashrc

        if uname -a | grep Ubuntu&> /dev/null
        then
            printf "For ubuntu you must run [source ~/.bashrc] or logout/login to complete path installation\n"
        fi
    fi
fi

if which go&> /dev/null
then
    pathgo=$(which go)
    if [[ "$pathgo" != "$gvmexe" ]]
    then
        printf "GVM is shadowed by %s in your PATH. Please update your PATH to use %s first\n" \
        "$pathgo" \
        "$gvmbin"
    fi
fi