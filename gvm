#!/bin/bash

help() {
    printf "Go Version Manager
    Usage: gvm <version> [<args>]\n
      To install a released version
      Example: gvm install 1.15.5\n

      To install the latest development
      Example: gvm install next\n

      To update an existing development version
      Example: gvm install next --update\n"
}

if [[ "$1" == ""  || "$1" == "-h" || "$1" == "--help" ]]
then
    help

    if [[ "$1" == ""  ]]
    then
        exit 1
    fi

    exit 0
fi

if [[ ! $1 =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]
then
    if [[ "$1" != "next" ]]
    then
        printf "%s is not a valid version\n" "$1"

        help

        exit 1
    fi
fi

wd=$(pwd)
gvmroot="$HOME/.gvm"
srcd="$gvmroot/next"
version="$1"
symln=$gvmroot/go
versionroot="$gvmroot/$version"
defaultgoroot="/usr/local/go"
golanggit="https://go.googlesource.com/go"
dlroot="https://dl.google.com/go/"
update=$2
branch="master"

function override() {
    if [[ -d $defaultgoroot ]]
    then
        printf "Removing existing %s\n" "$defaultgoroot"
        if ! sudo rm -rf $defaultgoroot
        then
            fail "$(printf "Unable to remove existing %s\n" "$defaultgoroot")"
        fi
    fi

    printf "Creating for %s to %s\n" "$defaultgoroot" "$symln"
    if ! sudo mkdir -p $defaultgoroot
    then
        fail "$(printf "Unable to create new to symlink %s\n" "$defaultgoroot")"
    fi

    if ! sudo ln -sf "$symln"/bin "$defaultgoroot"
    then
        fail "$(printf "Unable to symlink new %s\n" "$defaultgoroot")"
    fi
}

function fail() {
    printf "%s\n" "$1"
    exit 1
}

arch="amd64"
if ! uname -a | grep "x86_64"
then
    arch="arm64"
    printf "Configuring for %s Architecture\n" "$arch"
fi
    

if [[ "$OSTYPE" == "darwin"* ]]
then
    os="darwin"
elif [[ "$OSTYPE" == "linux"* ]]
then
    os="linux"
elif [[ "$OSTYPE" == "freebsd"* ]]
then
    os="freebsd"
else
    printf "Unsupported OS\n"
    exit 1
fi

if [[ ! -d "$gvmroot" ]]
then
        printf "Adding ~/.gvm directory for go installs\n"
        if ! mkdir "$gvmroot" 
        then
            fail "$(printf "Error creating %s\n" "$gvmroot")"
        fi
fi

printf "Checking for existing %s\n" "$versionroot"
if [[ ! -d "$symln" ]]
then
    if ! mkdir "$symln"
    then
        fail "$(printf "Unable to create directory %s\n" "$symln")"
    fi
fi

if [[ "$version" == "next" ]]
then
    printf "Installing Go %s\n" "$version"
    if ! which go
    then
        fail "$(printf "Installing go from %s requires an existing go installation\n" "$golanggit")"
    fi

    if [[ ! -d "$srcd" ]]
    then
        printf "Cloning go source\n"
        if ! git clone "$golanggit" "$srcd"
        then
            fail "$("Error cloning %s\n" "$golanggit")"
        fi

        # Add update flag since source repo
        # did not already exist
        update="--update"
    fi
    
    if [[ "$update" == "--update" ]]
    then
        cd "$srcd" || exit 1

        if ! git checkout "$branch"
        then
            fail "$(printf "Checkout of %s failed\n" "$branch")"
        fi

        if ! git pull
        then
            fail "$(printf "git pull failed for %s\n" "$branch")"
        fi

        if ! cd "$srcd/src/"
        then
            fail "$(printf "Unable to move to %s\n" "$srcd/src/")"
        fi

        if ! ./all.bash
        then
            cd "$wd" || exit 1
            fail "$(printf "Failure installing go from %s\n" "$branch")"
        fi

        cd "$wd" || exit 1
    fi
    
    # Set correct path for symlink re-map
    lnsrc="$versionroot/bin"
else
    if [[ ! -d "$versionroot" ]]
    then
        pkg="go$version.$os-$arch.tar.gz"
        url="$dlroot$pkg"
        
        printf "Downloading %s\n" "$url"
        if ! curl -f "$url" > "$pkg"
        then
            fail "$(printf "Unable to curl %s\n" "$url")"
        fi

        printf "Creating %s\n" "$versionroot"
        if ! mkdir -p "$versionroot"
        then
            fail "$(printf "Unable to create %s\n" "$versionroot")"
        fi

        if ! tar -C "$versionroot" -xzf "$pkg"
        then
            fail "$(printf "Unable to extract %s\n" "$pkg" rm -rf "$versionroot")"
        fi
            
        rm "$pkg"
    fi

    # Set correct path for symlink re-map
    lnsrc="$versionroot/go/bin"
fi

printf "Updating symlink %s => %s\n" "$symln" "$lnsrc"
if ! ln -sf "$lnsrc" "$symln"
then
    fail "$(printf "Unable to symlink directory %s\n" "$lnsrc")"
fi

# Check to see if the default root exists and if it is a symlink
# prior to prompting the user to override it
if [[ ! -L $defaultgoroot/bin || ! -e $defaultgoroot/bin ]]
then
    read -rp "Do you wish to override /usr/local/go \
    [Yes: Y or y | No: Enter]? " yn

    # Only trigger on `Y` or `y`
    if [[ "$yn" == "Y" || "$yn" == "y" ]]
    then
        override
    fi
fi

if ! printf "%s" "$PATH" | grep -q "$symln/bin"
then
    printf "Adding %s/bin to PATH\n" "$symln"
    
    path=$(printf "export PATH=\"%s/bin:\$PATH\"" "$symln")

    if [[ "$SHELL" == *"zsh" ]]
    then
        printf "%s" "$path" >> "$HOME/.zshrc"
        exec zsh
    else
        printf "%s" "$path" >> "$HOME/.bashrc"
        "$HOME"/.bashrc
    fi
fi

pathgo=$(which go)
if [[ "$pathgo" != "$symln/bin/go" ]]
then
    printf "GVM is shadowed by %s in your PATH. Please update your PATH to use %s first\n" \
    "$pathgo" \
    "$symln"
fi