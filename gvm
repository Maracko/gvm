#!/bin/bash

help() {
    printf "Go Version Manager
    Usage: gvm <version> [<args>]\n
      To install a released version
      Example: gvm install 1.15.5\n

      To install the latest development
      Example: gvm install next\n

      To update an existing development version
      Example: gvm install next --update\n"
}

if [[ "$1" == ""  || "$1" == "-h" || "$1" == "--help" ]]
then
    help

    if [[ "$1" == ""  ]]
    then
        exit 1
    fi

    exit 0
fi

if [[ ! $1 =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
    if [[ "$1" != "next" ]]; then
        printf "%s is not a valid version\n" "$1"

        help

        exit 1
    fi
fi

wd=$(pwd)
gvmroot="$HOME/.gvm"
srcd="$gvmroot/next"
version="$1"
symln=$gvmroot/go
versionroot="$gvmroot/$version"
defaultgoroot="/usr/local/go"
golanggit="https://go.googlesource.com/go"
dlroot="https://dl.google.com/go/"
update=$2
branch="master"

function override() {
    if [ -d $defaultgoroot ]; then
        printf "Removing existing %s\n" "$defaultgoroot"
        sudo rm -rf $defaultgoroot || \
            printf "Unable to remove existing %s\n" "$defaultgoroot" \
            exit 1
    fi

    printf "Creating for %s to %s\n" "$defaultgoroot" "$symln"
    sudo mkdir -p $defaultgoroot || \
        printf "Unable to create new to symlink %s\n" "$defaultgoroot" \
        exit 1

    sudo ln -s "$symln"/bin "$defaultgoroot" || \
        printf "Unable to symlink new %s\n" "$defaultgoroot" \
        exit 1
}

arch="amd64"
uname -a | grep "x86_64" || \
    arch="arm64"
    printf "Configuring for %s Architecture\n" "$arch" \
    

if [[ "$OSTYPE" == "darwin"* ]]
then
    os="darwin"
elif [[ "$OSTYPE" == "linux"* ]]
then
    os="linux"
elif [[ "$OSTYPE" == "freebsd"* ]]
then
    os="freebsd"
else
    printf "Unsupported OS\n"
    exit 1
fi

if [[ ! -d "$gvmroot" ]]; then
        printf "Adding ~/.gvm directory for go installs\n"
        mkdir "$gvmroot" || printf "Error creating %s" "$gvmroot"; exit 1
fi

if [[ ! -L "$symln" && -d "$symln" ]]; then
    rm -rf "$symln" >/dev/null
    mkdir "$symln" || \
            printf "Unable to create directory %s" "$symln"
fi

if [[ "$version" == "next" ]]
then
    printf "Installing Go %s\n" "$version"
    which go>/dev/null || \
        printf "Installing go from %s requires an existing go installation\n" "$golanggit" \
        exit 1

    if [ ! -d "$srcd" ]; then
        printf "Cloning go source\n"
        git clone "$golanggit" "$srcd" || \
            printf "Error cloning %s" "$golanggit"; exit 1

        # Add update flag since source repo
        # did not already exist
        update="--update"
    fi
    
    if [[ "$update" == "--update" ]]
    then
        cd "$srcd" || exit 1

        git checkout "$branch" || \
            printf "Checkout of %s failed" "$branch"; exit 1
        git pull || \
            printf "git pull failed for %s" "$branch"; exit 1

        cd "$srcd/src/" || \
            printf "Unable to move to %s" "$srcd/src/"; exit 1
        ./all.bash || \
            printf "Failure installing go from %s" "$branch"

        cd "$wd" || exit 1
    fi
    
    # Set correct path for symlink re-map
    lnsrc="$versionroot/bin"
else
    if [[ ! -d "$versionroot" ]]; then
        pkg="go$version.$os-$arch.tar.gz"
        url="$dlroot$pkg"
        printf "Downloading %s\n" "$url"
        curl -f "$url" > "$pkg" || \
            printf "Unable to curl %s" "$url"

        printf "Making %s\n" "$versionroot"
        rm -rf "$versionroot"
        mkdir -p "$versionroot"
        tar -C "$versionroot" -xzf "$pkg" || \
            printf "Unable to extract %s" "$pkg" \
            rm -rf "$versionroot" \
            exit 1
            
        rm "$pkg"
    fi

    # Set correct path for symlink re-map
    lnsrc="$versionroot/go/bin"
fi

printf "Updating symlink %s => %s/bin\n" "$symln" "$lnsrc"
ln -s "$lnsrc" "$symln" || \
        printf "Unable to symlink directory %s" "$lnsrc"

# Check to see if the default root exists and if it is a symlink
# prior to prompting the user to override it
if [[ ! -L $defaultgoroot/bin || ! -e $defaultgoroot/bin ]]; then
    read -rp "Do you wish to override /usr/local/go \
    [Yes: Y or y | No: Enter]? " yn

    # Only trigger on `Y` or `y`
    if [[ "$yn" == "Y" || "$yn" == "y" ]]
    then
        override
    fi
fi

if ! printf "%s" "$PATH" | grep -q "$symln/bin"; then
    printf "Adding %s/bin to PATH\n" "$symln"
    
    path=$(printf "export PATH=\"%s/bin:\$PATH\"" "$symln")

    if [ "$SHELL" == "/bin/zsh" ]
    then
        printf "%s" "$path" >> "$HOME/.zshrc"
        exec zsh
    else
        printf "%s" "$path" >> "$HOME/.bashrc"
        "$HOME"/.bashrc
    fi
fi

pathgo=$(which go)
if [ "$pathgo" != "$symln/bin/go" ]
then
    printf "GVM is shadowed by %s in your PATH. Please update your PATH to \
    use %s/bin first\n" \
    "$pathgo" \
    "$symln"
fi