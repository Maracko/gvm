#!/bin/sh

function help() {
    echo "Go Version Manager"
    echo "Usage: gvm <version> [<args>]\n"

    echo "  To install a released version"
    echo "  Example: gvm install 1.15.5\n"

    echo "  To install the latest development"
    echo "  Example: gvm install next\n"

    echo "  To update an existing development version"
    echo "  Example: gvm install next --update"
}

if [[ "$1" == ""  || "$1" == "-h" || "$1" == "--help" ]]
then
    help

    if [[ "$1" == ""  ]]
    then
        exit 1
    fi

    exit 0
fi

if [[ ! $1 =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
    if [[ "$1" != "next" ]]; then
        echo "$1 is not a valid version\n"

        help

        exit 1
    fi
fi

wd=$(pwd)
gvmroot="$HOME/.gvm"
srcd="$gvmroot/next"
version="$1"
symln=$gvmroot/go
versionroot="$gvmroot/$version"
golanggit="https://go.googlesource.com/go"
dlroot="https://dl.google.com/go/"
update=$2


arch="amd64"
uname -a | grep "x86_64"
if [ $? -ne 0 ]; then
    echo "Configuring for ARM64 Architecture"
    arch="arm64"
fi

os="linux"
if [[ "$OSTYPE" == "darwin"* ]]
then
    os="darwin"
else
    echo "Unsupported OS"
    exit 1
fi

if [ ! -d $gvmroot ]; then
        echo "Adding ~/.gvm directory for go installs"
        mkdir $gvmroot
fi

if [[ ! -L "$symln" && -d "$symln" ]]; then
    rm -rf $symln >/dev/null
fi

if [[ "$version" == "next" ]]
then
    echo "Installing Go $version"
    which go>/dev/null
    if [ $? -ne 0 ]; then
        echo "Installing go from source requires an existing go installation"
        exit 1
    fi

    if [ ! -d $srcd ]; then
        echo "Cloning go source"
        git clone $golanggit $srcd

        # Add update flag since source repo
        # did not already exist
        update="--update"
    fi
    
    if [[ "$update" == "--update" ]]
    then
        cd $srcd

        git checkout master
        git pull

        cd $srcd/src/
        ./all.bash

        cd $wd
    fi

    echo "updating symlink $symln => $versionroot/bin"
    mkdir $symln
    ln -s $versionroot/bin $symln
else
    if [ ! -d $versionroot ]; then
        pkg="go$version.$os-$arch.tar.gz"
        url="$dlroot$pkg"
        echo "Downloading $url"
        curl -f $url > $pkg
        if [ $? -ne 0 ]; then
            echo "Unable to download $url"
            exit 1
        fi

        echo "Making $versionroot"
        rm -rf $versionroot
        mkdir -p $versionroot
        tar -C $versionroot -xzf $pkg
        if [ $? -ne 0 ]; then
            echo "Unable to extract $pkg"
            rm -rf $versionroot
            exit 1
        fi
        rm $pkg
    fi

    echo "updating symlink $symln => $versionroot/go/bin"
    mkdir $symln
    ln -s $versionroot/go/bin $symln
fi

if ! echo $PATH | grep -q $symln/bin; then
    echo "Adding $symln/bin to PATH"
    
    if [[ "$SHELL" == "/bin/zsh" ]]
    then
        echo "export PATH=\"$symln/bin:\$PATH\"" >> $HOME/.zshrc
        exec zsh
    else
        echo "export PATH=\"$symln/bin:\$PATH\"" >> $HOME/.bashrc
        source $HOME/.bashrc
    fi
fi

pathgo=$(which go)
if [[ $pathgo != "$symln/bin/go" ]]
then
    echo "GVM is shadowed by $pathgo in your PATH. Please update your PATH to use $symln/bin first"
fi